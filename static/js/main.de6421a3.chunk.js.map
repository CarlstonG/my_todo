{"version":3,"sources":["components/layout/Header.js","components/Todoitems.js","components/Todo.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["headerStyke","background","color","textAlign","padding","border","linkStyle","textDecoration","Header","style","to","Todoitems","getStyle","fontweight","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","onClick","delTodo","btnStyle","Component","borderRadius","cursor","marginLeft","Todo","todos","map","key","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","flex","placeholder","className","About","Fragment","App","axios","delete","then","res","filter","post","data","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de6421a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyke}>\r\n            <h1>My Todo List</h1>\r\n            <Link style={linkStyle} to=\"/\">Home</Link> |  <Link style={linkStyle} to=\"/about\">About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyke = {\r\n    background:  \"#333\",\r\n    color: 'white',\r\n    textAlign: 'center',\r\n    padding: '10px',\r\n    border: '1px solid white'\r\n}\r\nconst linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n}\r\n\r\n\r\n\r\nexport default Header;\r\n\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Todoitems extends Component {\r\n  \r\n  // code styling for true or false or any var inside app.js\r\n    getStyle = () => {\r\n       \r\n       //short version \r\n       return {\r\n        fontweight: '400',\r\n        background: 'skyblue',\r\n        padding: '8px',\r\n        borderBottom: '1px #ccc dotted',\r\n        textDecoration: this.props.todo.completed ?\r\n        'line-through' : 'none'\r\n    }\r\n\r\n\r\n\r\n       // long version ------// \r\n       // if(this.props.todo.completed){\r\n       //     return {\r\n       //         textDecoration: 'line-through'\r\n       //     }\r\n       // }\r\n       // else {\r\n       //     return {\r\n       //         textDecoration: 'none'\r\n       //     }\r\n        }\r\n    \r\n    \r\n\r\n    \r\n    //onchange is the bind event see dev inspect // passing event to Todo.js\r\n    render() {\r\n        const {id, title} = this.props.todo\r\n        return (\r\n            <div style={this.getStyle()}>\r\n          \r\n           <p>\r\n                <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/>\r\n                {''}\r\n               {title}\r\n               <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>X</button>\r\n               </p>\r\n             \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoitems.propTypes = {\r\n    todo: PropTypes.object.isRequired\r\n  }\r\n\r\nexport default Todoitems\r\n\r\nconst btnStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px 8px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    marginLeft: '2px'\r\n\r\n}","import React, { Component } from 'react';\r\nimport Todoitems from './Todoitems';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todo extends Component {\r\n    markComplete = () => {\r\n      \r\n}\r\n\r\n\r\n    //onchange is the bind event see dev inspect // passing event to App.js\r\n\r\n    render() {\r\n        \r\n        return this.props.todos.map((todo) => (\r\n        <Todoitems key={todo.id} todo={todo}markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\r\n        ));\r\n\r\n       \r\n    }\r\n}\r\n\r\nTodo.propTypes = {\r\n    todos: PropTypes.array.isRequired\r\n  }\r\n\r\nexport default Todo;","import React, { Component } from 'react'\r\n\r\nexport class AddTodo extends Component {\r\n\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: ''});\r\n    }\r\n    \r\nonChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n\r\n    render() {\r\n        return (\r\n        <form  onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n\r\n            <input \r\n            style={{flex: '10', padding: '5px'}}\r\n            type=\"text\" \r\n            name=\"title\" \r\n            placeholder=\"Add Todo ...\"\r\n            value={this.state.title}\r\n            onChange={this.onChange}\r\n            />\r\n\r\n            <input \r\n            type=\"submit\"\r\n            value=\"Submit\"\r\n            className=\"btn\"\r\n            style={{flex: 1}} />\r\n            </form>\r\n        )\r\n        }\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\nreturn (\r\n    <React.Fragment>\r\n\r\n    <h1>About</h1>\r\n    <p>This is My Todolist Version 1.0.0</p>\r\n   \r\n    <p> Created: Using React </p>\r\n    <p>Carlston G</p>\r\n    </React.Fragment>\r\n\r\n)\r\n\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport Todo from './components/Todo';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport './App.css';\n//import uuid from 'react-uuid';\nimport axios from 'axios';\n\n\n\nclass App extends Component {\n  state = {\n    todos: []\n\n  }\ncomponentDidMount() {\n  axios.get('https://jsonplaceholder.typicode.com/todos?_limit=30')\n  .then(res => this.setState({todos: res.data}))\n}\n\n  // toggle complete\n  markComplete = (id) => {\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id === id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })})\n  }\n\n\n//delete todo\n\ndelTodo = (id) => {\naxios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n  .then(res=>  this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)]}));\n \n}\n\n// Add todo \naddTodo = (title) => {\n axios.post('https://jsonplaceholder.typicode.com/todos', {\n  title,\n  completed: false\n })\n .then(res => this.setState({ todos: \n  [...this.state.todos, res.data]}));\n  \n}\n\n\n\n\n\n\n  render() {\n    \n     //onchange is the bind event see dev inspect //catching events from Todo.js and Todoitems.js\n  //passing the value of todos to todo\n    return (\n      <Router>\n              <div className=\"App\">\n          <div className=\"container\">\n      <Header/>\n      <Route exact path=\"/\" render={props => (\n        <React.Fragment>\n              <AddTodo addTodo={this.addTodo}/>\n      \n              <Todo todos={this.state.todos} markComplete={this.markComplete}\n              delTodo={this.delTodo}/>\n        </React.Fragment>\n      )}/>\n          <Route path=\"/about\" component={About}/>\n        </div>\n        </div>\n      </Router>\n\n    );\n  }\n}\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}